from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from sqlalchemy.ext.asyncio import AsyncSession

from crud.users import user_crud
from intern.states import InternReply, ManagerReply
from intern.utils import save_message

dialogue_router = Router()


@dialogue_router.message(F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É')
async def start_send_message_to_manager(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
) -> None:
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    sender_id = message.from_user.id
    receiver_id = await user_crud.get_manager_id(sender_id, session)
    if receiver_id is None:
        await message.answer('‚ùóÔ∏è–í—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.')
        await state.clear()
        return
    await state.set_state(InternReply.entering_message_to_manager)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É:')


@dialogue_router.message(InternReply.entering_message_to_manager)
async def send_message_to_manager(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    sender_id = message.from_user.id
    receiver_id = await user_crud.get_manager_id(sender_id, session)
    text = message.text
    reply_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
                    callback_data=f'reply_to_intern:{sender_id}',
                ),
            ],
        ],
    )
    await message.bot.send_message(
        chat_id=receiver_id,
        text=f'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å—Ç–∞–∂—ë—Ä–∞:\n\n{text}',
        reply_markup=reply_button,
    )
    await save_message(sender_id, receiver_id, text, session)
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
    await state.clear()


@dialogue_router.callback_query(F.data.startswith('reply_to_intern'))
async def handle_reply_to_intern(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞–∂—ë—Ä—É."""
    await callback.answer()
    intern_id = int(callback.data.split(':')[1])
    await state.update_data(intern_id=intern_id)
    await state.set_state(ManagerReply.entering_reply_text)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å—Ç–∞–∂—ë—Ä—É:')


@dialogue_router.message(ManagerReply.entering_reply_text)
async def handle_manager_reply(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç–∞–∂—ë—Ä—É."""
    data = await state.get_data()
    intern_id = data.get('intern_id')
    if not intern_id:
        await message.answer('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Å—Ç–∞–∂—ë—Ä–∞.')
        await state.clear()
        return
    reply_text = message.text
    sender_id = message.from_user.id
    reply_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
                    callback_data=f'reply_to_manager:{sender_id}',
                ),
            ],
        ],
    )
    await message.bot.send_message(
        chat_id=intern_id,
        text=f'üí¨ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{reply_text}',
        reply_markup=reply_button,
    )
    await save_message(sender_id, intern_id, reply_text, session)
    await message.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞–∂—ë—Ä—É.')
    await state.clear()


@dialogue_router.callback_query(F.data.startswith('reply_to_manager'))
async def handle_reply_to_manager(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞–∂—ë—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    await callback.answer()
    manager_id = int(callback.data.split(':')[1])
    await state.update_data(manager_id=manager_id)
    await state.set_state(InternReply.entering_message_to_manager)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É:')


@dialogue_router.message(InternReply.entering_message_to_manager)
async def handle_intern_reply(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ —Å—Ç–∞–∂—ë—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    data = await state.get_data()
    manager_id = data.get('manager_id')
    if not manager_id:
        await message.answer('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞.')
        await state.clear()
        return
    reply_text = message.text
    sender_id = message.from_user.id
    reply_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å',
                    callback_data=f'reply_to_manager:{sender_id}',
                ),
            ],
        ],
    )
    await message.bot.send_message(
        chat_id=manager_id,
        text=f'üí¨ –û—Ç–≤–µ—Ç –æ—Ç —Å—Ç–∞–∂—ë—Ä–∞:\n\n{reply_text}',
        reply_markup=reply_button,
    )
    await save_message(sender_id, manager_id, reply_text, session)
    await message.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.')
    await state.clear()
