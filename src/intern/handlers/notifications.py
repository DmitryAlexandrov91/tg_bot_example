import json
from typing import List

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.ext.asyncio import AsyncSession

from crud.questions import question_crud
from crud.referencepoint import referencepoint_crud
from engine import session_maker
from intern.states import FeedbackStates
from intern.utils import (
    complete_ref_point,
)
from models import ReferencePoint, User

notifications_router = Router()


def extract_questions(quiz_items: List[str]) -> List[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ json-—Å—Ç—Ä–æ–∫."""
    return [json.loads(item)['text_question'] for item in quiz_items]


async def handle_reference_point_type(
    bot: Bot,
    reference_point: ReferencePoint,
    user: User,
    scheduler: AsyncIOScheduler,
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    user_id = user.tg_id
    async with session_maker() as session:
        if reference_point.point_type == 'TEST':
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–µ—Å—Ç–µ
            start_preview_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text='–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞',
                            callback_data=f'start_preview:{reference_point.id}',
                        ),
                    ],
                ],
            )
            await bot.send_message(
                user_id,
                '–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –≤—ã –≥–æ—Ç–æ–≤—ã?',
                reply_markup=start_preview_keyboard,
            )

        elif reference_point.point_type == 'NOTIFICATION':
            await bot.send_message(
                user_id,
                (
                    'üì© –í–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏:\n'
                    f'{reference_point.notification.text}'
                ),
            )
            await complete_ref_point(reference_point, scheduler, session)

        elif reference_point.point_type == 'FEEDBACK_REQUEST':
            feedback_keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text='–û—Ç–≤–µ—Ç–∏—Ç—å',
                            callback_data=f'feedback_keyboard:{reference_point.id}',
                        ),
                    ],
                ],
            )
            await bot.send_message(
                user_id,
                'üì© –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.',
                reply_markup=feedback_keyboard,
            )
        else:
            raise ValueError('–ü–æ—Ö–æ–∂–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞!')


@notifications_router.callback_query(F.data.startswith('feedback_keyboard:'))
async def handle_reply_to_intern(
    callback: CallbackQuery,
    state: FSMContext,
) -> None:
    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."""
    await callback.answer()
    ref_point_id = int(callback.data.split(':')[1])
    await state.update_data(ref_point_id=ref_point_id)
    await state.set_state(FeedbackStates.waiting_for_feedback)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')


@notifications_router.message(FeedbackStates.waiting_for_feedback)
async def handle_reply_to_feedback(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."""
    data = await state.get_data()
    ref_point_id = data.get('ref_point_id')
    ref_point = await referencepoint_crud.get_reference_point_by_id(
        ref_point_id, session,
    )
    ref_point.feedback_request.user_answer = message.text
    session.add(ref_point.feedback_request)
    await session.commit()
    await complete_ref_point(ref_point, session)
    await message.answer('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!')
    await state.clear()


@notifications_router.callback_query(F.data.startswith('start_preview:'))
async def ask_confirmation(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞."""
    reference_point_id = int(callback.data.split(":")[1])
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text='‚úÖ –î–∞',
                callback_data=f'handle_start_test:{reference_point_id}',
            ),
            InlineKeyboardButton(
                text='‚ùå –ù–µ—Ç',
                callback_data='cancel_start',
            ),
        ],
    ])
    await callback.answer()
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –ù–∞—á–∞—Ç—å?",
        reply_markup=confirm_keyboard,
    )


@notifications_router.callback_query(F.data == 'cancel_start')
async def handle_cancel_reason(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–æ—Ç–º–µ–Ω–∞'."""
    await callback.answer('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.')
    if callback.message:
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer('‚ùå –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è.')


@notifications_router.callback_query(
    lambda c: c.data.startswith('handle_start_test:'),
)
async def handle_start(
    callback: CallbackQuery,
    session: AsyncSession,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞."""
    ref_point_id = int(callback.data.split(':')[1])
    ref_point = await referencepoint_crud.get_reference_point_by_id(
        ref_point_id, session,
    )
    questions = ref_point.test.questions

    for question in questions:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=answer, callback_data=f'answer:{question.id}:{i + 1}')]
            for i, answer in enumerate(question.answers)
        ])
        await callback.message.answer(
            f'{question.text_question}',
            reply_markup=keyboard,
        )


@notifications_router.callback_query(lambda c: c.data.startswith('answer:'))
async def handle_answer_callback(
    callback: CallbackQuery, session: AsyncSession,
) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç."""
    _, question_id_str, answer_index_str = callback.data.split(':')
    question_id = int(question_id_str)
    answer_index = int(answer_index_str)
    updated_question = await question_crud.update_user_answer(
        question_id, answer_index, session,
    )
    if updated_question:
        await callback.answer('–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ')
        await callback.message.edit_reply_markup(reply_markup=None)
    else:
        await callback.answer(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ ‚ùå', show_alert=True,
        )
