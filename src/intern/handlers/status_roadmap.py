from datetime import datetime

from aiogram import F, Router
from aiogram.types import (
    Message,
)
from sqlalchemy.ext.asyncio import AsyncSession

from crud.roadmap import roadmap_crud
from models.models import User

status_roadmap_router = Router()


@status_roadmap_router.message(F.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã')
async def status_roadmap_handler(
    message: Message,
    session: AsyncSession,
    user: User,
) -> None:
    """–ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–∂–µ—Ä–∞ –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    roadmap = await roadmap_crud.get_user_roadmap(
        intern_id=user.id,
        session=session,
    )
    if not roadmap:
        await message.answer(' –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã.')
        return

    lines = []

    lines.append(f'üìå –î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞: {roadmap.name}')
    for index, point in enumerate(roadmap.reference_points, start=1):
        point_type = point.point_type
        is_completed = point.is_completed
        check_datetime = point.check_datetime
        if is_completed:
            status_icon = '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ'
        elif check_datetime:
            status_icon = '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            if check_datetime < datetime.now():
                status_icon += ', –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ!‚ö†Ô∏è'
        else:
            status_icon = 'üîò –ù–µ –Ω–∞—á–∞—Ç–æ'
        lines.append(
            f'–®–∞–≥ {index}: {point_type}\n  –°—Ç–∞—Ç—É—Å: {status_icon}\n',
        )

    message_text = '\n'.join(lines).strip()

    if not message_text:
        await message.answer(
            '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç–µ.',
        )
    else:
        await message.answer(message_text)
