from datetime import datetime
from typing import Any, Awaitable, Callable, Optional, Union

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State
from sqlalchemy.ext.asyncio import AsyncSession

from crud import roadmap_crud, template_roadmap_crud
from manager.callbacks import ManagerReferencepointCallback
from manager.constants import DATETIME_FORMAT, POINT_TYPE_NAMES, SKIP_COMMAND
from manager.keyboards.referencepoints import (
    referencepoint_editor_cancel_keyboard,
)
from manager.keyboards.roadmaps import (
    get_roadmap_editor_menu_keyboard,
)
from manager.keyboards.template_roadmaps import (
    get_templateroadmap_editor_menu_keyboard,
)
from models.constants import ReferencePointType
from models.models import (
    ReferencePoint,
    RoadMap,
    TemplateReferencePoint,
    TemplateRoadMap,
)


async def send_or_edit_message(
    callback: types.CallbackQuery,
    message: dict[str, Any],
) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç—Å—ã–ª–∞–µ—Ç –Ω–æ–≤–æ–µ."""
    if callback.message and not isinstance(
        callback.message,
        types.InaccessibleMessage,
    ):
        await callback.message.edit_text(**message)
    else:
        await callback.answer(**message)


async def get_templateroadmap(
    templateroadmap_id: int,
    session: AsyncSession,
    callback: Optional[types.CallbackQuery] = None,
    message: Optional[types.Message] = None,
) -> Optional[TemplateRoadMap]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –®–∞–±–ª–æ–Ω–∞ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    templateroadmap = await template_roadmap_crud.get(
        templateroadmap_id,
        session,
        load_relations=True,
    )

    if not templateroadmap:
        error_msg = '–®–∞–±–ª–æ–Ω –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!'
        if callback:
            await callback.answer(error_msg, show_alert=True)
        elif message:
            await message.answer(error_msg)
    return templateroadmap


async def get_intern_roadmap(
    intern_id: int,
    session: AsyncSession,
    callback: Optional[types.CallbackQuery] = None,
) -> Optional[RoadMap]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É —Å—Ç–∞–∂—ë—Ä–∞."""
    roadmap = await roadmap_crud.get_user_roadmap(
        intern_id=intern_id,
        session=session,
    )

    if not roadmap and callback:
        await callback.answer(
            '–£ —Å—Ç–∞–∂—ë—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã!',
            show_alert=True,
        )
    return roadmap


def generate_roadmap_editor_text(
    roadmap: Union[RoadMap, TemplateRoadMap],
    state_data: dict,
    changes: bool = False,
    edit_mode: bool = False,
) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã.

    roadmap: –æ–±—ä–µ–∫—Ç RoadMap –∏–ª–∏ TemplateRoadMap,
    state_data: –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞,
    changes: —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –î–ö,
    edit_mode: —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    is_template = isinstance(roadmap, TemplateRoadMap)

    state_data = state_data or {}

    name = state_data.get('new_name', roadmap.name)
    description = state_data.get('new_description', roadmap.description)

    status_line = ''
    if is_template:
        is_blocked = state_data.get('is_blocked', roadmap.is_blocked)
        status_line = (
            f'<b><i>–°—Ç–∞—Ç—É—Å</i></b>: '
            f'{"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞" if is_blocked else "üîì –ê–∫—Ç–∏–≤–Ω–∞"}'
            f'{" <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>" if "is_blocked" in state_data else ""}\n'
        )

    text = [
        '<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏e: ' if edit_mode else '<b>',
        '–®–∞–±–ª–æ–Ω –î–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã</b>\n\n' if is_template
        else '–î–æ—Ä–æ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n',
        '<b>‚ÄºÔ∏è–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!‚ÄºÔ∏è</b>\n\n' if changes else '',
        f'<b><i>–ù–∞–∑–≤–∞–Ω–∏–µ</i></b>: {name}',
        ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'new_name' in state_data else '',
        '\n',
        f'<b><i>–û–ø–∏—Å–∞–Ω–∏–µ</i></b>: {description}',
        ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'new_description' in state_data else '',
        '\n',
        status_line,
        f'<b><i>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫</i></b>: {len(roadmap.reference_points)}',
    ]

    return ''.join(text)


async def process_templateroadmap_field_update(
    message: types.Message,
    state: FSMContext,
    session: AsyncSession,
    state_to_set: State,
    obj_field: str | None,
    data_field: str,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π –®–∞–±–ª–æ–Ω–∞ –¥–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    data = await state.get_data()

    templateroadmap = await get_templateroadmap(
        data['templateroadmap_id'],
        session,
        message=message,
    )

    if not templateroadmap:
        return

    update_data = {
        data_field: message.text if message.text != obj_field else None,
    }
    await state.update_data(**update_data)

    await state.set_state(state_to_set)
    await message.delete()

    data = await state.get_data()
    text = generate_roadmap_editor_text(
        templateroadmap,
        data,
        changes=True,
    )

    await message.bot.edit_message_text(
        text=text,
        parse_mode='HTML',
        chat_id=message.chat.id,
        message_id=data.get('editor_message_id'),
        reply_markup=get_templateroadmap_editor_menu_keyboard(
            templateroadmap=templateroadmap,
            changes='new_name' in data or 'new_description' in data,
        ),
    )


async def process_roadmap_field_update(
    message: types.Message,
    state: FSMContext,
    session: AsyncSession,
    state_to_set: State,
    obj_field: str,
    data_field: str,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–µ–π –î–æ—Ä–æ–∂–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    data = await state.get_data()
    roadmap = await roadmap_crud.get(
        data['roadmap_id'],
        session,
        relations_to_upload=[RoadMap.user_associations],
    )
    if not roadmap or not roadmap.user_associations:
        return

    update_data = {
        data_field: message.text if message.text != obj_field else None,
    }
    await state.update_data(**update_data)

    await state.set_state(state_to_set)
    await message.delete()

    data = await state.get_data()

    text = generate_roadmap_editor_text(
        roadmap=roadmap,
        state_data=data,
        changes=True,
        edit_mode=True,
    )

    intern_id = roadmap.user_associations[0].user_id

    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data['editor_message_id'],
        text=text,
        parse_mode='HTML',
        reply_markup=get_roadmap_editor_menu_keyboard(
            roadmap=roadmap,
            intern_id=intern_id,
            changes='new_name' in data or 'new_description' in data,
        ),
    )


def generate_referencepoint_text(
    point: Union[TemplateReferencePoint, ReferencePoint],
    state_data: Optional[dict] = None,
    changes: bool = False,
    edit_mode: bool = False,
) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫.

    point: –æ–±—ä–µ–∫—Ç Referencepoint –∏–ª–∏ TemplateReferencepoint,
    state_data: –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞,
    changes: —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –î–ö,
    edit_mode: —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    if state_data is None:
        state_data = {}

    is_template = isinstance(point, TemplateReferencePoint)

    name = state_data.get('new_name', point.name)
    point_type = state_data.get('new_point_type', point.point_type)
    is_blocked = state_data.get('is_blocked', point.is_blocked)

    trigger_time = ""
    check_time = ""
    reminder_days = ""

    if not is_template:
        trigger_time = format_datetime(
            state_data.get(
                'trigger_datetime',
                getattr(point, 'trigger_datetime', None),
            ),
        )
        check_time = format_datetime(
            state_data.get(
                'check_datetime',
                getattr(point, 'check_datetime', None),
            ),
        )
        reminder_days = str(
            state_data.get(
                'reminder_days_before',
                getattr(point, 'reminder_days_before', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
            )) + ' –¥–Ω.'

    notification_text = ''
    if point_type == ReferencePointType.NOTIFICATION:
        notification = getattr(point, 'notification', None)
        notification_text = (
            notification.text if notification and notification.text
            else '‚ö†Ô∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω'
        )
        if 'new_notification_text' in state_data:
            notification_text = state_data['new_notification_text']

    text_parts = [
        '<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏</b>\n\n' if edit_mode
        else '<b>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞</b>\n\n',
        '<b>‚ÄºÔ∏è–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!‚ÄºÔ∏è</b>\n\n' if changes else '',
        f'<b><i>–ù–∞–∑–≤–∞–Ω–∏–µ</i></b>: {name}',
        ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'new_name' in state_data else '',
        '\n',
        f'<b><i>–¢–∏–ø —Ç–æ—á–∫–∏</i></b>: {POINT_TYPE_NAMES.get(point_type)}',
        ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'new_point_type' in state_data else '',
        '\n',
    ]

    if not is_template:
        text_parts.extend([
            f'<b><i>–î–∞—Ç–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è</i></b>: {trigger_time}',
            ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'trigger_datetime' in state_data else '',
            '\n',

            f'<b><i>–î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏</i></b>: {check_time}',
            ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'check_datetime' in state_data else '',
            '\n',

            f'<b><i>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞</i></b>: {reminder_days}',
            ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'reminder_days_before' in state_data
            else '',
            '\n',
        ])

    text_parts.extend([
        '<b><i>–°—Ç–∞—Ç—É—Å</i></b>: ',
        f'{"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞" if is_blocked else "üîì –ê–∫—Ç–∏–≤–Ω–∞"}',
        ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if 'is_blocked' in state_data else '',
    ])

    if point_type == ReferencePointType.NOTIFICATION:
        notification_status = (
            ' <i>(–∏–∑–º–µ–Ω–µ–Ω–æ)</i>' if (
                'new_notification_text' in state_data
            ) else ''
        )
        text_parts.extend([
            '\n<b><i>–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</i></b>:\n',
            f'{notification_text}{notification_status}',
        ])

    return ''.join(text_parts)


def format_datetime(dt: Optional[datetime]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'."""
    if isinstance(dt, datetime):
        return dt.strftime(DATETIME_FORMAT)
    return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'


async def generate_referencepoint_creator_text(
    points_to_process: list,
    entered_data: dict,
    current_point_name: Optional[str] = None,
    current_field: Optional[str] = None,
    error_message: Optional[str] = None,
    edit_mode: bool = False,
) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫."""
    text = '<b>–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫</b>\n\n'

    for i, (_, name) in enumerate(points_to_process):
        point_data = entered_data.get(str(i), {})
        trigger_time = point_data.get('trigger_time', '<i>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</i>')
        check_time = point_data.get('check_datetime', '<i>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</i>')
        reminder = point_data.get('reminder_days_before', '<i>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</i>')

        text += (
            f'{i+1}. <b>{name}</b>\n'
            f'   - –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: <b>{trigger_time}</b>\n'
            f'   - –î–µ–¥–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{check_time}</b>\n'
            f'   - –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ (–¥–Ω–µ–π): <b>{reminder}</b>\n\n'
        )

    if current_point_name and current_field:
        field_names = {
            'trigger_time': '–≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–±—ã—Ç–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú)',
            'check_datetime': (
                f'–¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ–≤–µ—Ä–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ "{SKIP_COMMAND}")'
            ),
            'reminder_days_before': (
                f'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—á–∏—Å–ª–æ –∏–ª–∏ "{SKIP_COMMAND}")'
            ),
        }
        text += (f'<b><i>–í–≤–µ–¥–∏—Ç–µ {field_names[current_field]} '
                 f'–¥–ª—è —Ç–æ—á–∫–∏ "{current_point_name}":</i></b>')

    if error_message:
        text += f'\n\n<b>‚ÄºÔ∏è {error_message} ‚ÄºÔ∏è</b>'

    return text


async def process_datetime_input(
    message: types.Message,
    session: AsyncSession,
    state: FSMContext,
    field: str,
    next_field: str,
    required: bool,
    *,
    data_input_func: Callable[
        [types.Message, AsyncSession, FSMContext],
        Awaitable[Any],
    ],
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã."""
    data = await state.get_data()
    current_error = None
    user_input = message.text.strip().lower()

    if not required and user_input == SKIP_COMMAND:
        datetime_str = SKIP_COMMAND
    else:
        try:
            dt = datetime.strptime(user_input, DATETIME_FORMAT)
            datetime_str = dt.strftime(DATETIME_FORMAT)
        except ValueError:
            current_error = 'invalid_format'

    if current_error:
        error_message = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!' if required else (
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ '
            f'"{SKIP_COMMAND}"'
        )

        if data.get('last_error') == current_error:
            await message.delete()
            return

        await state.update_data(last_error=current_error)
        text = await generate_referencepoint_creator_text(
            points_to_process=data['points_to_process'],
            entered_data=data.get('entered_data', {}),
            current_point_name=data['current_point_name'],
            current_field=field,
            error_message=error_message,
        )

        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=data['last_bot_message_id'],
            text=text,
            parse_mode='HTML',
        )
        await message.delete()
        return

    index = str(data['current_point_index'])
    entered_data = data.get('entered_data', {})
    point_data = entered_data.get(index, {})
    point_data[field] = datetime_str
    entered_data[index] = point_data

    await state.update_data(
        entered_data=entered_data,
        last_error=None,
        current_field=next_field,
    )

    await data_input_func(message, session, state)
    await message.delete()


def generate_datetime_prompt(
    current_value: Optional[datetime],
    field_name: str,
    callback_data: ManagerReferencepointCallback,
    skip_allowed: bool = False,
) -> dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã."""
    current = current_value.strftime(
        DATETIME_FORMAT,
    ) if current_value else SKIP_COMMAND
    text = (
        f'<i>–¢–µ–∫—É—â–∞—è {field_name}:</i>\n'
        f'<b>{current}</b>\n\n'
        f'<i>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</i>\n'
    )
    if skip_allowed:
        text += f'<i>–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ {SKIP_COMMAND} —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º</i>'

    return {
        'text': text,
        'parse_mode': 'HTML',
        'reply_markup': referencepoint_editor_cancel_keyboard(
            callback_data.referencepoint_id,
            callback_data.intern_id,
        ),
    }
